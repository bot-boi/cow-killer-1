// vim: set syntax=pascal:
// CTS2(11777213, 8, 0.24, 0.08) cow leather color
// CTS2( 4741228, 14, 0.04, 0.70) brown cow color
// CTS2( 3554893, 13, 0.09, 0.54) black solid cow color
// CTS2( 2176573,  8, 0.11, 1.48) black spotted cow color
// CTS2(  469051,  5, 0.03, 0.44) stair pillar color
// CTS2(  807030,  4, 0.05, 0.86) pasture gate color
// zoom is set at 50%, angle is highest, brightness is 100%

program cow;

//{$DEFINE SMART}
{$include_once context.simba}
{$include_once utils.simba}
{$include_once finders.simba}
{$include_once credentials.simba}

var
  Canvas: TCanvas;

procedure onStart;

var
  P: array of Int64;
  I: Int64;

begin
  writeln('starting');

  InitContext(); // loads srl & walker

  LoadMapContext(LUMBY_SLICE);

  BR_COW           := CTS2( 4741228, 14, 0.04, 0.70);
  BL_COW           := CTS2( 3554893, 13, 0.09, 0.54);
  COW_LEATHER      := CTS2(11777213,  8, 0.24, 0.08);
  STAIR_PILLAR     := CTS2(  469051,  5, 0.03, 0.44);
  PASTURE_GATE     := CTS2(  807030,  4, 0.05, 0.86);
  BL_COW_SPOTTED   := CTS2( 2176573,  8, 0.11, 1.48);

  PPasture         := Point(1000, 251);  // cow pasture NE of lumbridge castle
  PStairs          := Point( 796, 538);  // lumbridge stairs
  PStairsUpper     := Point(  70, 117);  // lumbridge bank lumby-bank.png
  PBank            := Point(  84,  66);  // lumbridge bank stairs lumby-bank.png
  PGate            := Point( 980, 311);  // pasture gate location
  StairPath        := [];                // path to stairs from pasture
  PasturePath      := [];                // path from stairs to pasture
  BankPath         := [PBank];           // path from upper stair to bank
  UpperStairPath   := [PStairsUpper];    // path from bank to upper stair

  for P in rawPath do
    PasturePath.Append(Point(P[0], P[1]));

  I := Length(PasturePath);
  while I > 0 do begin
    I -= 1;
    StairPath.Append(PasturePath[I]);
  end;
end;

procedure onExit;
begin
  writeln('exiting');
  FreeContext();
end;

procedure walkTo(path: TPointArray);
begin
  writeln('walking path...');
  writeln(path);
  Walker.WalkPath(Path);
end;

function openGate(): boolean;
var
  TPA, Gate: TPointArray;
  ATPA: T2DPointArray;

begin
  Result := False;
  if (SRL.FindColors(TPA, PASTURE_GATE, Mainscreen.GetBounds) > 0) then
  begin
    ATPA := TPA.Cluster(4);
    ATPA.FilterSize(30, 2000);
    ATPA.SortByIndex(Mainscreen.GetMiddle);
    {$IFDEF SMART}
      Smart.Image.DebugATPA(ATPA);
    {$ENDIF}
    for Gate in ATPA do
    begin
      Mouse.Move(GetTPABounds(Gate));
      if Mainscreen.IsUpText('Gate') then begin
        if ChooseOption.Open(1) then begin
          ChooseOption.Select('Open');
          writeln('i opened the gate :)');
          wait(800, 2000);
          Result := True;
          Break;
        end else
          writeln('the gate was already open :D');
      end;
    end;
  end;
  writeln('opened gate: ' + BoolToStr(Result));
end;

function walkStairs(): boolean;

  function findStair(): boolean;
  var
    TPA, _Stair: TPointArray;
    ATPA: T2DPointArray;
    Options: TOptionArray;
    Option: TOption;
  begin
    WaitPlayerAnimating();
    Result := False;
    if SRL.FindColors(TPA, STAIR_PILLAR, Mainscreen.GetBounds()) > 0 then
    begin
      ATPA := TPA.Cluster(1);
      ATPA.FilterSize(10, 150);
      ATPA.SortByMiddle(Mainscreen.GetMiddle);

      {$IFDEF SMART}
        Smart.Image.DebugATPA(ATPA);
      {$ENDIF}

      for _Stair in ATPA do
      begin
        Mouse.Move(GetTPABounds(_Stair).Expand(20));
        if Mainscreen.IsUpText('Staircase', 1000) then begin
          writeln('staircase found!');
          Result := True;
          Break;
        end;
      end;
    end;
  end;

  function climbStair(): boolean; // assumes mouse is hovering over staircase
  var
    Options: TOptionArray;
    Option: TOption;
    Up: boolean;                  // going up or down?

  begin
    Result := False;
    repeat wait(100); until findStair();
    if ChooseOption.Open(3) then begin
      Options := ChooseOption.GetOptions();
      for Option in Options do begin
        if Option.Str = 'Climb-up Staircase' then begin
          Up := True;
          ChooseOption.Select('Climb-up Staircase');
          WaitScreenMoving();
          Break;
        end else if Option.Str = 'Climb-down Staircase' then begin
          Up := False;
          ChooseOption.Select('Climb-down Staircase');
          WaitScreenMoving();
          Break;
        end;
      end;
    end;
    repeat wait(100); until findStair();
    if ChooseOption.Open(3) then begin
      if Up then begin
        ChooseOption.Select('Climb-up Staircase');
      end else
        ChooseOption.Select('Climb-down Staircase');
      WaitScreenMoving();
      Result := True;
    end;
    {$IFDEF SMART}
      Smart.Image.drawClear(0);
    {$ENDIF}
  end;

begin
  Result := climbStair();
end;

procedure bankRun(); // run to bank, deposit items, run back to pasture
begin
  writeln('starting bank run');
  while not inRange2(Walker.GetMyPos(), PGate, 20) do begin
    wait(333, 777);
    walkTo([PGate]);
  end;

  repeat Minimap.RandomCompass(0, 360) until openGate();

  while not inRange2(Walker.GetMyPos(), PStairs, 30) do begin // loop in case pathing fails
    wait(333, 777);
    walkTo(StairPath);
  end;

  LoadMapContext(LUMBY_BANK, 3);
  Walker.SkipClose = 0;

  repeat Minimap.RandomCompass(0, 360); until walkStairs();

  while not inRange2(Walker.GetMyPos(), PBank, 10) do begin
    wait(333, 777);
    walkTo([PBank]);
  end;

  if Random(1) = 1 then AntibanContext();

  repeat Minimap.RandomCompass(0, 360); until Bankscreen.Open(blLumbridge);
  repeat until Bankscreen.DepositAll();
  repeat until Bankscreen.Close();

  while not inRange2(Walker.GetMyPos(), PStairsUpper, 20) do begin
    wait(333, 777);
    walkTo([PStairsUpper]);
  end;

  LoadMapContext(LUMBY_SLICE);
  Walker.SkipClose = 0;

  repeat Minimap.RandomCompass(0, 360); until walkStairs();

  walkTo(PasturePath);  // walk from stairs to pasture gate
  while not inRange2(Walker.GetMyPos(), PGate, 10) do begin
    wait(333, 777);
    walkTo([PGate]);
  end;
  repeat until openGate(); // these retry loops need timeouts
  walkTo([PPasture]);
end;

procedure mainLoop();
var
  I: Integer;
begin
  writeln('entering main loop!');
  repeat
    I := 3; // cows to kill before looting
    writeln('onLoop');
    wait(50);                   // lowers CPU usage :)
    {$IFDEF SMART}
      Smart.Image.Clear;
      Smart.Image.drawClear(0); // clears debug stuff
    {$ENDIF}

    if Random(25) = 1 then AntibanContext();

    if Minimap.GetHPPercent < 40 then
      //Logout.ClickLogout();
      wait(20000,54000); // wait for ~6-15 mins to heal up

      if not SRL.IsLoggedIn() then begin
        Players.SetCurrent(0);
        Players.LoginCurrent();
      end;

    if not (Inventory.Count() = 28) then begin
      if not findLeather() then
        if not findCow() then begin
          walkTo([RandomizePoint(PPasture, 10)]);
        end else begin
          repeat I -= 1 until not findCow() or (I <= 0);;
        end;
    end else
        bankRun();
  until(false);
end;

begin
  Canvas.Init();
  Canvas.TextOut(0,0, 'hello');
  onStart;

  mainLoop();

  onExit;
end.
